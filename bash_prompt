#!/usr/bin/env bash
# Utility functions
#########################

set_virtualenv() {
   if test -z "$VIRTUAL_ENV" ; then
       PYTHON_VIRTUALENV=''
   else
       PYTHON_VIRTUALENV="(`basename \"$VIRTUAL_ENV\"`) "
   fi
}

set_nix_shell() {
   if test -z "$IN_NIX_SHELL" ; then
       NIX_SHELL=''
   else
       NIX_SHELL='[Î»] '
   fi
}

set_shell_indicator() {
   if test `id -u` -eq 0 ; then
       # DON'T TOUCH THE ESCAPING!!!
       SHELL_SIGN="\[$red\]root \$\[$reset\]"
   else
       # DON'T TOUCH THE ESCAPING!!!
       SHELL_SIGN="\[$dim\]\[$bold\]\[$blue\]>_\[$reset\]"
   fi
}

set_remote_indicator()
{
    REMOTE=''

    if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
      REMOTE='\u@\h '
    else
      case $(ps -o comm= -p $PPID) in
        sshd|*/sshd) REMOTE='\u@\h ';;
      esac
    fi
}

handle_exit_code()
{
    cmd_exit_code=$?

    if [ ! $cmd_exit_code -eq 0 ]; then
        LAST_CMD_ERRORED=" $cmd_exit_code"
    else
        LAST_CMD_ERRORED=''
    fi
}

# Colors and appearance
#########################

reset=$(tput sgr0)

bold=$(tput bold)
dim=$(tput dim)

blue=$(tput setaf 33)
green=$(tput setaf 64)
red=$(tput setaf 1)
grey=$(tput setaf 10)

#########################

GIT_PS1_SHOWDIRTYSTATE=1

set_bash_prompt() {
    history -a # write history
    handle_exit_code
    set_virtualenv
    set_nix_shell
    set_shell_indicator
    set_remote_indicator

    # DON'T TOUCH THE ESCAPING!!!
    remote="\[$grey\]$REMOTE\[$reset\]"
    git_info="\[$green\]\$(__git_ps1)\[$reset\]"
    venv="\[$green\]\$PYTHON_VIRTUALENV\[$reset\]"
    cwd="\w"
    nix="\[$green\]\$NIX_SHELL\[$reset\]"
    dolar_question="\[$red\]\$LAST_CMD_ERRORED\[$reset\]"

    PS1="${remote}${venv}${nix}${cwd}${git_info}${dolar_question} ${SHELL_SIGN} "
}

PROMPT_COMMAND=set_bash_prompt
