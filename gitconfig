# vim: set syntax=gitconfig:
[include]
    # user configuration
    path = ~/.gitid

[core]
	pager = less

	excludesfile = ~/.gitignore_global
	attributesfile = ~/.gitattributes_global

	autocrlf = input
	safecrlf = true

    untrackedCache = true

[fetch]
	prune = true
    # this is meant as a test, see if it works for me
    fsckobjects = true

[push]
    default = simple
    followTags = false
    recurseSubmodules = check
    autoSetupRemote = true
[pull]
    ff = only

[rebase]
    autosquash = true

[commit]
    verbose = true # -v

[rerere]
    enabled = true

# yes, it's a statement
[init]
	defaultBranch = master

# 3rd party
############################
[hub]
	protocol = ssh
[url "git@github.com:"]
	pushInsteadOf = https://github.com/

# Diffs
############################
[diff]
    renames = copies
	algorithm = patience

[diff "bin"]
    textconv = hexdump -v -C

[difftool]
    prompt = false

[difftool "nvimdiff"]
    cmd = nvim -d $LOCAL $REMOTE

# UI
############################
[alias]
    a = add
    c = commit
    d = diff
    p = push
    s = status --short

    aa = a --all
    call = "!f() { git diff-index --quiet --cached HEAD -- && git aa && git c $@ || echo 'Aborting! Index dirty or something went wrong'; }; f"
    co = checkout
    dc = d --cached
    cam = !git call -C HEAD --amend

    pforce = push --force-with-lease
	cof = !git for-each-ref --format='%(refname:short)' refs/heads | fzf | xargs git co
    purge-branches = !git-purge-branches


    crypt = !git-crypt
    serve = daemon --reuseaddr --base-path=. --export-all --verbose
[color "status"]
    added = green 
    changed = blue
    untracked = red

[color "diff"]
    meta = yellow bold
    frag = magenta bold # line info
    old = red
    new = green

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = cyan

# Filters
############################
[filter "kicad_project"]
	clean = sed -E 's/^update=.*$/update=Date/'
	smudge = cat

[filter "kicad_sch"]
	clean = "sed -E 's/#(PWR|FLG)[0-9]+/#\\1?/'"
	smudge = cat

[filter "workrave_config"]
	clean = "~/.scripts/filter-workrave-git clean"
	smudge = "~/.scripts/filter-workrave-git smudge"

[filter "taskwarrior_ignore_set_context"]
	clean = grep -v 'context='
	smudge = cat
