#!/usr/bin/env python3
import os
try:
    import i3ipc
except ImportError:
    print("Err: run pip3 install --user i3ipc")
    print("Err")
    print("#FF0000")
    exit(1)
# TODO: use actual player API or something instead of window title xD


def main():
    i3 = i3ipc.Connection()

    handle_button(os.getenv("button"), i3=i3)

    root = i3.get_tree()
    songs = [con.name for con in root if con.window_class == 'Spotify']

    if len(songs) > 1:
        print("Multiple Spotifies running")
        print("WTF")
        exit(2)

    if len(songs) == 0:
        print("No Spotify running")
        print("Off")
        exit(2)

    song = songs[0]

    if song == "Spotify Premium":
        # TODO: make it go through common pipeline
        print("enjoy the silence")
        print("silence")
        exit(0)

    artist, *title = song.split("-")
    title = "-".join(title)

    artist = artist_heuristic_trimm(artist.strip())
    artist = artist.strip()
    title = title.strip()
    artist, title = smart_trimm_both(artist, title)

    full_text = f"{artist} - {title}"
    short_text = dot_trimm(artist)

    print(full_text)
    print(short_text)


def artist_heuristic_trimm(artist) -> str:
    table = {
        "Scott Bradlee's Postmodern Jukebox": "Postmodern Jukebox",
    }

    return table.get(artist, artist)


def dot_trimm(s: str, length: int = 20) -> str:
    return s[:(length if len(s) <= length else length - 3)] + ("..." if len(s) > length else "")


def smart_trimm_both(artist, title):
    # TODO: distribute the trimming space between both artist and title
    return dot_trimm(artist, 20), dot_trimm(title, 20)

def handle_button(button, i3: i3ipc.Connection):
    if button == "1":
        i3.command("workspace 8:8 â™ª")
    elif button == "3":
        # TODO: spotify mute
        ...
    else:
        pass


if __name__ == "__main__":
    main()
