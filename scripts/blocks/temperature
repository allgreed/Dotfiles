#!/usr/bin/env python3
import os
import subprocess
import re
from typing import Dict


def py_xgetres(res: str):
    """A really shitty ad hoc implementation of xgetres, totally non-portable and probably will fail for your .Xresources
    
    Feel free to replce it with a legit exec once someone ports xgetres from aur(tm) to nix
    """
    p = subprocess.check_output(["xrdb", "-query"])  # py35 compatibility
    entry_tokens = p.decode("utf-8").split("\n")
    fuj_entries = map(lambda s: s.split(":"), entry_tokens)
    entries = filter(lambda l: len(l) == 2, fuj_entries)
    resource_map = { k.lstrip("*"): v.lstrip() for k, v in entries }
    return resource_map[res.lstrip(".")]


def main():
    chip = os.getenv("BLOCK_CHIP", "")

    p = subprocess.check_output(["sensors", "-u"] + ([chip] if chip else []))  # py35 compatibility
    sensor_lines = map(lambda l: l.strip(), p.decode("utf-8").strip().split("\n"))

    def get_first_input_for(index: int, suffix="input"):
        # TODO: rename
        ble = "temp{}_{}".format(index, suffix)
        return float(next(l.lstrip(ble + " :") for l in sensor_lines if ble in l))

    temperature = get_first_input_for(1)
    temperature_critical = get_first_input_for(1, "crit")

    full_text = "{}°C".format(temperature)
    short_text = "{}°C".format(temperature)

    color = py_xgetres(".color14")

    if temperature > 90:
        color = py_xgetres(".color1")
    elif temperature > 70:
        color = py_xgetres(".color13")

    print(full_text)
    print(short_text)
    print(color)

    if temperature > 100:
        exit(33)  # sets urgent flag on i3blocks

if __name__ == "__main__":
    main()
