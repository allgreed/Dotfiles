#! /usr/bin/env python3
"""Control speakers volume"""
import subprocess
import os
import re
import signal
from typing import Sequence

import click


VOLUME_MAX = 100


def spawn(command, remove_empty_lines=True) -> Sequence[str]:
    p = subprocess.run(command, shell=True, stdout=subprocess.PIPE, check=True)

    raw_lines = p.stdout.decode("utf-8").split("\n")

    if not remove_empty_lines:
        return raw_lines

    return list(filter(bool, raw_lines))


# TODO: put this it it's own fuction, move spawn to bottom
sinks_indexes = spawn("pacmd list-sinks | grep index | cut -d' ' -f 5")

if len(sinks_indexes) == 1:
    the_sink_idx = sinks_indexes[0]
else:
    print(f"ERR: expecting a single sink, found {len(sinks_indexes)}")
# TODO: ------------


simple_commands = {
    "mute": f"pactl set-sink-mute {the_sink_idx} 1",
    "unmute": f"pactl set-sink-mute {the_sink_idx} 0",
}

complex_commands = {
    "set_volume": f"pactl set-sink-volume {the_sink_idx} {{volume}}%",
}

def main():
    @click.group()
    @click.option("--signal", type=int, help="User signal # to emmit after running the command")
    def cli(signal):
        pass

    for name, action in simple_commands.items():
        cli.add_command(make_simple_command(action), name)

    cli.add_command(toggle);
    cli.add_command(set_volume, "set");
    cli.add_command(inc_volume, "inc");
    cli.add_command(dec_volume, "dec");

    @cli.resultcallback()
    def _(_, signal=None, **kwargs):
        emmit_signal_to_i3blocks(signal)

    cli()


@click.command()
def toggle():
    cmd = "unmute" if is_muted() else "mute"
    spawn(simple_commands[cmd])


@click.command()
@click.argument('value', type=int)
def set_volume(value):
    spawn(complex_commands['set_volume'].format(volume=value))


@click.command()
@click.argument('step', type=int)
def dec_volume(step):
    current_volume = get_volume()
    
    if current_volume > VOLUME_MAX:
        spawn(complex_commands['set_volume'].format(volume=VOLUME_MAX))
        return

    # rounds up to the nearest lower multiple of VOLUME_STEP
    decrement = -(((current_volume - 1) % step) + 1) 

    spawn(complex_commands['set_volume'].format(volume=decrement))


@click.command()
@click.argument('step', type=int)
def inc_volume(step):
    if is_muted():
        spawn(simple_commands["unmute"])
        return

    current_volume = get_volume()

    if current_volume >= VOLUME_MAX:
        return

    # rounds down to nearest higher multiple of step
    increment = '+%d' % min((step - (current_volume % step)), VOLUME_MAX)

    spawn(complex_commands['set_volume'].format(volume=increment))


def get_volume() -> int:
    output_lines = spawn("pactl list sinks", remove_empty_lines=False)
    line_with_volume = next(filter(lambda x: "Volume:" in x, output_lines))
    volume = re.search(r'\/\s+(\d+)%\s+\/', line_with_volume).group(1)
    volume = int(volume)

    return volume


def make_simple_command(action):
    @click.command()
    def command():
        spawn(action)

    return command


def is_muted() -> bool:
    try:
        return spawn("pactl list sinks | grep -q Mute:.no")
    except subprocess.CalledProcessError:
        return True
    else:
        return False


def emmit_signal_to_i3blocks(signal_no: int) -> None:
    for pid in spawn("pgrep i3blocks"):
        os.kill(int(pid), signal.SIGRTMIN + signal_no)


if __name__ == "__main__":
    main()
